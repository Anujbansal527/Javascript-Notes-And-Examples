console.log("ðŸŒŸ Start"); // Pehle yeh sync line print hoti hai

// ðŸ”½ Yeh hai callback hell ka structure â€“ nested setTimeouts
setTimeout(() => {
  console.log("âœ… 1st kaam complete"); // 1 sec ke baad chalta hai

  setTimeout(() => {
    console.log("âœ… 2nd kaam complete"); // pehle ke baad 1 sec

    setTimeout(() => {
      console.log("âœ… 3rd kaam complete"); // fir 1 sec baad

      setTimeout(() => {
        console.log("âœ… 4th kaam bhi complete"); // fir 1 sec baad
      }, 1000);

    }, 1000);

  }, 1000);

}, 1000);

console.log("ðŸŒŸ End"); // Yeh bhi sync hai, turant chalega

/* 
ðŸ”´ Problem: Callback Hell
- Yeh code bahut deeply nested hai
- Read karna mushkil ho jata hai
- Maintain karna mushkil ho jata hai
- Error handling aur flow samajhna hard ho jata hai
- Agar 10 steps hote toh pura jungle ban jaata (Pyramid of Doom ðŸ˜¨)
*/

/* âœ… Solution: 
- Promises
- Async/Await
- Named functions (to break nesting)
*/

/*
output
ðŸŒŸ Start
ðŸŒŸ End
(wait 1s) â†’ âœ… 1st kaam complete
(wait 1s) â†’ âœ… 2nd kaam complete
(wait 1s) â†’ âœ… 3rd kaam complete
(wait 1s) â†’ âœ… 4th kaam bhi complete

*/